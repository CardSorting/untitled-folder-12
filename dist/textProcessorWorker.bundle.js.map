{"version":3,"file":"textProcessorWorker.bundle.js","mappings":"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","sources":["webpack://untitled-folder-12/./utils/textProcessorConfig.js","webpack://untitled-folder-12/./utils/languages/english.js","webpack://untitled-folder-12/./utils/languages/japanese.js","webpack://untitled-folder-12/./utils/languages/chinese.js","webpack://untitled-folder-12/./utils/languagePatterns.js","webpack://untitled-folder-12/./utils/textAnalyzer.js","webpack://untitled-folder-12/./utils/chunkManager.js","webpack://untitled-folder-12/./textProcessorWorker.js"],"sourcesContent":["// Text Processor Configuration\nexport const TextProcessorConfig = {\n  // Chunk size configuration\n  chunk: {\n    optimal: 150,\n    max: 200,\n    min: 50,\n    tolerance: 20,\n    // Advanced chunking options\n    breakpoints: {\n      preferred: ['。', '．', '！', '？', '.', '!', '?'], // Primary break points\n      acceptable: [',', '、', '，', ';', '；'], // Secondary break points\n      fallback: [' ', '\\n', '\\t'] // Last resort break points\n    },\n    // Language-specific settings\n    languages: {\n      english: { maxWords: 25, minWords: 3 },\n      japanese: { maxChars: 50, minChars: 10 },\n      chinese: { maxChars: 50, minChars: 10 }\n    }\n  },\n\n  // Pause duration configuration\n  pause: {\n    breathing: 250,\n    emphasis: 500,\n    paragraph: 1000,\n    list: 400,\n    // Detailed pause settings\n    punctuation: {\n      period: 800,\n      comma: 400,\n      semicolon: 600,\n      colon: 500,\n      dash: 300,\n      parenthesis: 300,\n      quote: 200,\n      ellipsis: 450\n    },\n    // Context-based pauses\n    context: {\n      dialogue: 600,\n      description: 400,\n      action: 300,\n      transition: 500\n    },\n    // Emotional pauses\n    emotion: {\n      excited: 200,\n      sad: 600,\n      thoughtful: 800,\n      neutral: 400\n    }\n  },\n\n  // Processing settings\n  processing: {\n    maxIterations: 1000,\n    bufferSize: 5000,\n    maxBlockSize: 10000,\n    // Performance settings\n    throttle: {\n      chunkDelay: 50,      // ms between chunk processing\n      batchSize: 10,       // chunks per batch\n      maxQueueSize: 100    // maximum queued chunks\n    },\n    // Memory management\n    memory: {\n      maxCacheSize: 1000,  // maximum cached items\n      cleanupThreshold: 0.8, // cleanup when 80% full\n      ttl: 300000         // cache TTL in ms (5 minutes)\n    }\n  },\n\n  // Voice and speech settings\n  voice: {\n    default: {\n      rate: 1.0,\n      pitch: 1.0,\n      volume: 1.0\n    },\n    // Content-type specific settings\n    contentTypes: {\n      heading: { rate: 0.9, pitch: 1.1, volume: 1.0 },\n      emphasis: { rate: 0.95, pitch: 1.05, volume: 1.0 },\n      quote: { rate: 1.0, pitch: 0.95, volume: 0.9 },\n      parenthetical: { rate: 1.1, pitch: 0.9, volume: 0.8 }\n    },\n    // Language-specific adjustments\n    languages: {\n      english: { rate: 1.0, pitch: 1.0 },\n      japanese: { rate: 0.9, pitch: 1.0 },\n      chinese: { rate: 0.9, pitch: 1.0 }\n    }\n  },\n\n  // Text analysis settings\n  analysis: {\n    // Sentence complexity metrics\n    complexity: {\n      maxLength: 100,      // maximum sentence length\n      maxClauses: 5,       // maximum clauses per sentence\n      maxNesting: 3        // maximum nested structures\n    },\n    // Content classification\n    classification: {\n      minConfidence: 0.7,  // minimum confidence for classification\n      categories: ['narrative', 'dialogue', 'description', 'technical']\n    },\n    // Semantic analysis\n    semantic: {\n      emphasisThreshold: 0.6,  // threshold for emphasis detection\n      emotionThreshold: 0.5,   // threshold for emotion detection\n      contextWindow: 3         // sentences for context analysis\n    }\n  },\n\n  // Error handling and recovery\n  errorHandling: {\n    maxRetries: 3,\n    retryDelay: 1000,\n    fallbackOptions: {\n      useSimpleChunking: true,\n      skipComplexAnalysis: true,\n      forceSynchronousProcessing: true\n    },\n    logging: {\n      level: 'warning',    // log level: debug, info, warning, error\n      maxEntries: 1000,    // maximum log entries\n      persistLogs: false   // whether to persist logs\n    }\n  },\n\n  // Accessibility settings\n  accessibility: {\n    screenReader: {\n      announceStructure: true,  // announce structural elements\n      describeFormatting: true, // describe text formatting\n      indicatePunctuation: true // indicate punctuation marks\n    },\n    alternatives: {\n      provideTextAlternatives: true,  // provide text alternatives\n      describeMathContent: true,      // describe mathematical content\n      handleSpecialCharacters: true   // handle special characters\n    }\n  }\n};\n","// English Language Patterns\n\nexport const EnglishPatterns = {\n  abbreviations: {\n    titles: new Set([\n      'mr', 'mrs', 'ms', 'dr', 'prof', 'rev', 'sr', 'jr', 'esq',\n      'hon', 'gov', 'pres', 'supt', 'rep', 'sen', 'amb'\n    ]),\n    academic: new Set([\n      'ph.d', 'm.d', 'b.a', 'm.a', 'm.sc', 'b.sc', 'd.phil',\n      'b.tech', 'm.tech', 'm.phil', 'b.ed', 'm.ed', 'j.d'\n    ]),\n    business: new Set([\n      'inc', 'ltd', 'corp', 'co', 'llc', 'llp', 'gmbh', 'sa',\n      'ag', 'plc', 'intl', 'assn', 'bros', 'mfg', 'dept'\n    ]),\n    temporal: new Set([\n      'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep',\n      'oct', 'nov', 'dec', 'mon', 'tue', 'wed', 'thu', 'fri',\n      'sat', 'sun', 'a.m', 'p.m', 'b.c', 'a.d', 'cent'\n    ]),\n    geographic: new Set([\n      'st', 'ave', 'blvd', 'rd', 'hwy', 'apt', 'ste', 'ft',\n      'mt', 'pt', 'n', 's', 'e', 'w', 'ne', 'nw', 'se', 'sw'\n    ]),\n    units: new Set([\n      'kg', 'km', 'cm', 'mm', 'mg', 'hz', 'kb', 'mb', 'gb',\n      'tb', 'hr', 'min', 'sec', 'ft', 'in', 'yd', 'ml', 'oz'\n    ])\n  },\n\n  pausePoints: new Map([\n    ['.', { weight: 1.0, pause: 800, context: 'end' }],\n    ['!', { weight: 1.0, pause: 800, context: 'exclamation' }],\n    ['?', { weight: 1.0, pause: 800, context: 'question' }],\n    [';', { weight: 0.7, pause: 600, context: 'major_break' }],\n    [':', { weight: 0.6, pause: 500, context: 'introduction' }],\n    [',', { weight: 0.4, pause: 400, context: 'minor_break' }],\n    ['—', { weight: 0.5, pause: 450, context: 'em_dash' }],\n    ['–', { weight: 0.4, pause: 400, context: 'en_dash' }],\n    ['-', { weight: 0.3, pause: 300, context: 'hyphen' }]\n  ]),\n\n  semanticMarkers: {\n    emphasis: new Set([\n      'important', 'warning', 'note', 'caution', 'remember',\n      'key', 'critical', 'essential', 'crucial', 'vital',\n      'notice', 'attention', 'alert', 'danger', 'tip'\n    ]),\n    emotion: {\n      positive: new Set([\n        'hooray', 'great', 'excellent', 'wonderful', 'fantastic',\n        'amazing', 'brilliant', 'outstanding', 'superb', 'perfect'\n      ]),\n      negative: new Set([\n        'unfortunately', 'sadly', 'regrettably', 'alas',\n        'disappointingly', 'tragically', 'woefully'\n      ]),\n      emphasis: new Set([\n        'absolutely', 'definitely', 'certainly', 'surely',\n        'undoubtedly', 'unquestionably', 'indisputably'\n      ]),\n      uncertainty: new Set([\n        'perhaps', 'maybe', 'possibly', 'presumably',\n        'apparently', 'seemingly', 'probably', 'likely'\n      ])\n    },\n    transition: new Set([\n      'however', 'therefore', 'furthermore', 'moreover',\n      'meanwhile', 'consequently', 'nevertheless', 'otherwise',\n      'additionally', 'similarly', 'conversely', 'specifically'\n    ])\n  },\n\n  patterns: {\n    sentence: /[.!?]+[\\s\\n]+(?=[A-Z])/g,\n    clause: /,\\s*(?:and|or|but|because|while|although|though|unless|if|when|where|which|who|that|despite|whereas)/gi,\n    quotation: /\"([^\"]*)\"|\\s'([^']*)'/g,\n    parenthetical: /\\(([^)]+)\\)|\\[([^\\]]+)\\]|{([^}]+)}/g,\n    emphasis: /\\*\\*(.+?)\\*\\*|__(.+?)__|_(.+?)_|\\*(.+?)\\*/g,\n    list: /^[\\s]*(?:[•\\-*]|\\d+\\.|[a-zA-Z]\\.)(?:\\s+)/,\n    heading: /^(?:#{1,6}|\\=+|\\-+)\\s+.*$|^[A-Z][A-Z\\s]+[A-Z]$/,\n    url: /https?:\\/\\/\\S+|www\\.\\S+/,\n    email: /[\\w.-]+@[\\w.-]+\\.\\w+/,\n    number: /\\d+(?:st|nd|rd|th)?(?:,\\d{3})*(?:\\.\\d+)?/,\n    time: /\\d{1,2}:\\d{2}(?::\\d{2})?(?:\\s*[AaPp][Mm])?/,\n    date: /(?:\\d{1,2}[-\\/]\\d{1,2}[-\\/]\\d{2,4})|(?:(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\\.?\\s+\\d{1,2},?\\s+\\d{4})/i,\n    phone: /(?:\\+\\d{1,3}[-.\\s]?)?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}/,\n    money: /\\$\\d+(?:,\\d{3})*(?:\\.\\d{2})?/,\n    whitespace: /\\s+/\n  },\n\n  structure: {\n    paragraph: /\\n\\s*\\n/,\n    indentation: /^[ \\t]+/,\n    listItem: /^[\\s]*(?:[•\\-*]|\\d+\\.|[a-zA-Z]\\.)\\s+/,\n    blockquote: /^>+\\s/,\n    codeBlock: /^(?:    |\\t)/,\n    horizontalRule: /^(?:-{3,}|\\*{3,}|_{3,})\\s*$/\n  }\n};\n","// Japanese Language Patterns\n\nexport const JapanesePatterns = {\n  abbreviations: {\n    titles: new Set([\n      'さん', '様', '氏', '君', '先生', '教授', '博士',\n      '社長', '部長', '課長', '係長', '主任'\n    ]),\n    honorifics: new Set([\n      'お', 'ご', '殿', '様', '先生', '閣下'\n    ]),\n    organizations: new Set([\n      '株式会社', '有限会社', '合同会社', '財団法人',\n      '社団法人', '学校法人', '独立行政法人'\n    ])\n  },\n\n  pausePoints: new Map([\n    ['。', { weight: 1.0, pause: 800, context: 'end' }],\n    ['．', { weight: 1.0, pause: 800, context: 'end' }],\n    ['！', { weight: 1.0, pause: 800, context: 'exclamation' }],\n    ['？', { weight: 1.0, pause: 800, context: 'question' }],\n    ['、', { weight: 0.4, pause: 400, context: 'minor_break' }],\n    ['，', { weight: 0.4, pause: 400, context: 'minor_break' }],\n    ['：', { weight: 0.6, pause: 500, context: 'introduction' }],\n    ['；', { weight: 0.7, pause: 600, context: 'major_break' }],\n    ['…', { weight: 0.5, pause: 450, context: 'ellipsis' }],\n    ['―', { weight: 0.5, pause: 450, context: 'dash' }]\n  ]),\n\n  semanticMarkers: {\n    emphasis: new Set([\n      '重要', '警告', '注意', '注目', '確認',\n      '必須', '危険', '緊急', 'ポイント', '要点'\n    ]),\n    emotion: {\n      positive: new Set([\n        '素晴らしい', '最高', '優れた', '良い', '嬉しい',\n        '楽しい', '幸せ', '面白い', '快適', '満足'\n      ]),\n      negative: new Set([\n        '残念', '悲しい', '申し訳ない', '困った', '悪い',\n        '不快', '不満', '心配', '怖い', '嫌'\n      ]),\n      emphasis: new Set([\n        '絶対に', '必ず', '確かに', '間違いなく',\n        '当然', '明らかに', '確実に', '本当に'\n      ]),\n      uncertainty: new Set([\n        'たぶん', 'おそらく', 'かもしれない', '多分',\n        '説かもしれません', '可能性があります'\n      ])\n    },\n    transition: new Set([\n      'しかし', 'ところが', 'それでも', 'そのため',\n      'したがって', 'また', 'さらに', 'なお',\n      'ただし', 'むしろ', 'あるいは', 'すなわち'\n    ])\n  },\n\n  patterns: {\n    sentence: /[。．！？]+/g,\n    particle: /[はがのにへとでもや]/g,\n    honorific: /(?:さん|君|様|先生|氏)$/,\n    quotation: /「([^」]*)」|『([^』]*)』/g,\n    parenthetical: /（([^）]*)）|\\(([^)]*)\\)/g,\n    emphasis: /[【】《》〈〉「」『』]/g,\n    list: /^[\\s]*(?:・|[\\d１-９]+、|\\([\\d１-９]+\\))/,\n    heading: /^(?:［[^］]*］|【[^】]*】|■|□|◆|◇|▲|△|▼|▽)/,\n    date: /(?:\\d{4}年\\d{1,2}月\\d{1,2}日)|(?:令和\\d{1,2}年)|(?:平成\\d{1,2}年)/,\n    time: /\\d{1,2}時\\d{1,2}分(?:\\d{1,2}秒)?/,\n    phone: /(?:\\+\\d{1,3}[-.\\\\s]?)?\\d{2,4}[-.\\\\s]?\\d{2,4}[-.\\\\s]?\\d{4}/,\n    money: /¥\\d+(?:,\\d{3})*(?:\\.\\d{2})?/,\n    whitespace: /[\\s　]+/\n  },\n\n  structure: {\n    paragraph: /\\n\\s*\\n/,\n    indentation: /^[\\s　]+/,\n    listItem: /^[\\s]*(?:・|\\d+、|[①-⑳]|[㋐-㋾])\\s*/,\n    blockquote: /^[＞>]+\\s*/,\n    codeBlock: /^(?:    |\\t)/,\n    horizontalRule: /^(?:―{3,}|＊{3,}|＿{3,})\\s*$/\n  },\n\n  // Japanese-specific patterns\n  kanji: /[\\u4E00-\\u9FFF]/,\n  hiragana: /[\\u3040-\\u309F]/,\n  katakana: /[\\u30A0-\\u30FF]/,\n  furigana: /[\\u3040-\\u309F]|\\[\\u4E00-\\u9FFF\\][\\u3040-\\u309F]+/g,\n  ruby: /<ruby>[\\u4E00-\\u9FFF]+<rt>[\\u3040-\\u309F]+<\\/rt><\\/ruby>/g\n};\n","// Chinese Language Patterns\n\nexport const ChinesePatterns = {\n  abbreviations: {\n    titles: new Set([\n      '先生', '女士', '小姐', '教授', '博士', '主任',\n      '经理', '总裁', '董事长', '主席'\n    ]),\n    honorifics: new Set([\n      '老', '小', '大', '师', '总', '长'\n    ]),\n    organizations: new Set([\n      '有限公司', '股份公司', '集团', '企业',\n      '研究所', '学院', '大学', '机构'\n    ])\n  },\n\n  pausePoints: new Map([\n    ['。', { weight: 1.0, pause: 800, context: 'end' }],\n    ['！', { weight: 1.0, pause: 800, context: 'exclamation' }],\n    ['？', { weight: 1.0, pause: 800, context: 'question' }],\n    ['，', { weight: 0.4, pause: 400, context: 'minor_break' }],\n    ['、', { weight: 0.4, pause: 400, context: 'minor_break' }],\n    ['：', { weight: 0.6, pause: 500, context: 'introduction' }],\n    ['；', { weight: 0.7, pause: 600, context: 'major_break' }],\n    ['……', { weight: 0.5, pause: 450, context: 'ellipsis' }],\n    ['—', { weight: 0.5, pause: 450, context: 'dash' }]\n  ]),\n\n  semanticMarkers: {\n    emphasis: new Set([\n      '重要', '警告', '注意', '提醒', '记住',\n      '必须', '危险', '紧急', '要点', '关键'\n    ]),\n    emotion: {\n      positive: new Set([\n        '优秀', '出色', '完美', '精彩', '卓越',\n        '优异', '杰出', '出众', '优良', '完善'\n      ]),\n      negative: new Set([\n        '遗憾', '可惜', '抱歉', '糟糕', '不幸',\n        '悲伤', '难过', '失望', '痛心', '惋惜'\n      ]),\n      emphasis: new Set([\n        '绝对', '一定', '确实', '必然', '肯定',\n        '无疑', '当然', '显然', '明显', '毫无疑问'\n      ]),\n      uncertainty: new Set([\n        '可能', '或许', '大概', '也许', '估计',\n        '兴许', '没准', '不一定', '不确定'\n      ])\n    },\n    transition: new Set([\n      '但是', '然而', '不过', '因此', '所以',\n      '而且', '并且', '此外', '另外', '况且',\n      '反之', '相反', '尽管', '虽然', '即使'\n    ])\n  },\n\n  patterns: {\n    sentence: /[。！？]+/g,\n    measure: /[个個條条份]/g,\n    delimiter: /[的得地]/g,\n    quotation: /\"([^\"]*)\"|\\s'([^']*)'/g,\n    parenthetical: /（([^）]*)）|\\(([^)]*)\\)/g,\n    emphasis: /[【】《》〈〉「」『』]/g,\n    list: /^[\\s]*(?:•|[\\d１-９]+、|\\([\\d１-９]+\\))/,\n    heading: /^(?:［[^］]*］|【[^】]*】|■|□|◆|◇|▲|△|▼|▽)/,\n    date: /(?:\\d{4}年\\d{1,2}月\\d{1,2}日)|(?:\\d{4}\\/\\d{1,2}\\/\\d{1,2})/,\n    time: /\\d{1,2}[时點]\\d{1,2}[分](?:\\d{1,2}[秒])?/,\n    phone: /(?:\\+\\d{1,3}[-.\\s]?)?\\d{3,4}[-.\\s]?\\d{3,4}[-.\\s]?\\d{4}/,\n    money: /￥\\d+(?:,\\d{3})*(?:\\.\\d{2})?|¥\\d+(?:,\\d{3})*(?:\\.\\d{2})?|[\\d.]+元/,\n    whitespace: /[\\s　]+/\n  },\n\n  structure: {\n    paragraph: /\\n\\s*\\n/,\n    indentation: /^[\\s　]+/,\n    listItem: /^[\\s]*(?:•|\\d+、|[①-⑳]|[㋐-㋾])\\s*/,\n    blockquote: /^[＞>]+\\s*/,\n    codeBlock: /^(?:    |\\t)/,\n    horizontalRule: /^(?:―{3,}|＊{3,}|＿{3,})\\s*$/\n  },\n\n  // Chinese-specific patterns\n  simplified: /[\\u4E00-\\u9FFF]/,\n  traditional: /[\\u4E00-\\u9FFF]/,\n  pinyin: /[āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜ]/,\n  numbers: {\n    simplified: /[〇一二三四五六七八九十百千万亿]/,\n    traditional: /[零壹贰叁肆伍陆柒捌玖拾佰仟萬億]/\n  },\n  punctuation: {\n    fullWidth: /[，。！？；：\"\"''（）【】《》〈〉「」『』]/,\n    halfWidth: /[,.!?;:\"'()\\[\\]<>]/\n  }\n};\n","// Language Patterns Module\nimport { EnglishPatterns } from './languages/english';\nimport { JapanesePatterns } from './languages/japanese';\nimport { ChinesePatterns } from './languages/chinese';\n\n// Common patterns across all languages\nexport const CommonPatterns = {\n  whitespace: /\\s+/,\n  linebreak: /\\r?\\n/,\n  indent: /^(?:    |\\t)/,\n  \n  // Common structural elements\n  structure: {\n    heading: new Set(['#', '##', '###', '====', '----']),\n    section: new Set(['§', '¶', '†', '‡']),\n    formatting: new Set(['*', '_', '**', '__', '~~', '`'])\n  },\n  \n  // Common quote markers\n  quotes: new Set(['\"', '\"', '\"', \"'\", \"'\", \"'\", '「', '」', '『', '』']),\n  \n  // Common list markers\n  lists: new Set([\n    '•', '-', '*', '1.', '2.', '3.', '①', '②', '③',\n    'a.', 'b.', 'c.', 'A.', 'B.', 'C.', '(a)', '(b)', '(c)',\n    '一', '二', '三', 'Ⅰ', 'Ⅱ', 'Ⅲ'\n  ])\n};\n\n// Export language-specific patterns\nexport { EnglishPatterns, JapanesePatterns, ChinesePatterns };\n\n// Language detection patterns\nexport const LanguageDetection = {\n  english: /^[\\x00-\\x7F\\s]+$/,  // ASCII characters only\n  japanese: /[\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF]/,  // Hiragana, Katakana, and Kanji\n  chinese: /[\\u4E00-\\u9FFF\\u3400-\\u4DBF]/  // CJK Unified Ideographs\n};\n\n// Helper function to detect language\nexport function detectLanguage(text) {\n  if (LanguageDetection.japanese.test(text)) {\n    return 'japanese';\n  } else if (LanguageDetection.chinese.test(text)) {\n    return 'chinese';\n  } else if (LanguageDetection.english.test(text)) {\n    return 'english';\n  }\n  return 'unknown';\n}\n\n// Helper function to get language-specific patterns\nexport function getLanguagePatterns(language) {\n  switch (language) {\n    case 'english':\n      return EnglishPatterns;\n    case 'japanese':\n      return JapanesePatterns;\n    case 'chinese':\n      return ChinesePatterns;\n    default:\n      return EnglishPatterns; // Default to English\n  }\n}\n","// Text Analysis Utilities\nimport { TextProcessorConfig } from './textProcessorConfig.js';\nimport { CommonPatterns, getLanguagePatterns, detectLanguage } from './languagePatterns';\n\nexport class TextAnalyzer {\n  static analyzeBlockType(text) {\n    const blockInfo = {\n      type: 'paragraph',\n      context: {},\n      semanticLevel: 0,\n      metadata: {\n        complexity: 0,\n        formality: 0,\n        emotion: null,\n        language: detectLanguage(text)\n      }\n    };\n\n    const patterns = getPatterns(text);\n    const semanticMarkers = getSemanticMarkers(text);\n\n    // Check for list items with enhanced pattern matching\n    if (patterns.list.test(text)) {\n      blockInfo.type = 'list-item';\n      blockInfo.semanticLevel = 1;\n      blockInfo.metadata.formality = 0.5;\n    }\n\n    // Enhanced heading detection\n    if (this.isHeading(text)) {\n      blockInfo.type = 'heading';\n      blockInfo.semanticLevel = this.getHeadingLevel(text);\n      blockInfo.metadata.formality = 0.8;\n    }\n\n    // Detect block quotes\n    if (patterns.blockquote.test(text)) {\n      blockInfo.type = 'quote';\n      blockInfo.context.quoted = true;\n      blockInfo.metadata.formality = 0.7;\n    }\n\n    // Analyze text complexity\n    blockInfo.metadata.complexity = this.analyzeComplexity(text);\n\n    // Detect content type and adjust metadata\n    const contentType = this.detectContentType(text);\n    if (contentType) {\n      blockInfo.context.contentType = contentType;\n      blockInfo.metadata.formality = this.getFormalityLevel(contentType);\n    }\n\n    // Analyze emotional content\n    const emotionAnalysis = this.analyzeEmotion(text);\n    if (emotionAnalysis.emotion) {\n      blockInfo.metadata.emotion = emotionAnalysis.emotion;\n      blockInfo.context.emotionalIntensity = emotionAnalysis.intensity;\n    }\n\n    return blockInfo;\n  }\n\n  static isHeading(text) {\n    return (\n      CommonPatterns.heading.test(text) ||\n      (text.length < TextProcessorConfig.analysis.complexity.maxLength / 2 &&\n        /^[A-Z][^.!?]+$/.test(text))\n    );\n  }\n\n  static getHeadingLevel(text) {\n    const match = text.match(/^#{1,6}/);\n    if (match) {\n      return match[0].length;\n    }\n    return text.length < 50 ? 2 : 1;\n  }\n\n  static analyzeComplexity(text) {\n    const config = TextProcessorConfig.analysis.complexity;\n    let complexity = 0;\n\n    // Analyze sentence length\n    const wordCount = text.split(CommonPatterns.whitespace).length;\n    complexity += Math.min(wordCount / config.maxLength, 1) * 0.4;\n\n    // Analyze clause count\n    const clauseCount = (text.match(/,|;|and|or|but|because|if|when|while/g) || []).length + 1;\n    complexity += Math.min(clauseCount / config.maxClauses, 1) * 0.3;\n\n    // Analyze nesting level\n    const nestingLevel = (text.match(/[\\(\\[\\{]/g) || []).length;\n    complexity += Math.min(nestingLevel / config.maxNesting, 1) * 0.3;\n\n    return Math.min(complexity, 1);\n  }\n\n  static detectContentType(text) {\n    const patterns = {\n      technical: /\\b(?:function|class|method|algorithm|data|system|process)\\b/i,\n      narrative: /\\b(?:then|after|before|when|while|during)\\b/i,\n      dialogue: /[\"'](?:[^\"']|\\\\.)*[\"']|[A-Z][a-z]+:/,\n      description: /\\b(?:appears?|looks?|seems?|feels?|smells?|sounds?|tastes?)\\b/i\n    };\n\n    for (const [type, pattern] of Object.entries(patterns)) {\n      if (pattern.test(text)) {\n        return type;\n      }\n    }\n    return null;\n  }\n\n  static getFormalityLevel(contentType) {\n    const formalityLevels = {\n      technical: 0.9,\n      narrative: 0.6,\n      dialogue: 0.4,\n      description: 0.7\n    };\n    return formalityLevels[contentType] || 0.5;\n  }\n\n  static analyzeEmotion(text) {\n    const result = {\n      emotion: null,\n      intensity: 0\n    };\n\n    // Check for emotional markers\n    for (const [emotion, words] of Object.entries(semanticMarkers.emotion)) {\n      const matches = text.toLowerCase().split(CommonPatterns.whitespace)\n        .filter(word => words.has(word));\n      \n      if (matches.length > 0) {\n        result.emotion = emotion;\n        result.intensity = Math.min(matches.length / 5, 1);\n        break;\n      }\n    }\n\n    // Analyze punctuation for emotional intensity\n    const exclamations = (text.match(/!/g) || []).length;\n    const questions = (text.match(/\\?/g) || []).length;\n    result.intensity = Math.max(\n      result.intensity,\n      Math.min((exclamations + questions) / 3, 1)\n    );\n\n    return result;\n  }\n\n  static isActualSentenceEnd(text, position, { inQuote, inParentheses }) {\n    if (inQuote || inParentheses > 0) return false;\n\n    // Look back for potential abbreviation\n    const prevWord = text.slice(Math.max(0, position - 20), position)\n      .split(CommonPatterns.whitespace).pop().toLowerCase();\n\n    // Check all abbreviation categories\n    for (const category of Object.values(getAbbreviations(text))) {\n      if (category.has(prevWord)) return false;\n    }\n\n    // Look ahead for sentence continuation\n    const nextChar = text[position + 1] || '';\n    const followingChar = text[position + 2] || '';\n\n    // Handle closing punctuation\n    if ('\"\\')]}'.includes(nextChar)) {\n      return this.isActualSentenceEnd(text, position + 1, { inQuote, inParentheses });\n    }\n\n    // Check for proper sentence boundary\n    return (\n      nextChar === ' ' &&\n      (!followingChar || followingChar === followingChar.toUpperCase()) &&\n      !this.isSpecialCase(text, position)\n    );\n  }\n\n  static isSpecialCase(text, position) {\n    const nextWord = text.slice(position + 1, position + 20)\n      .split(CommonPatterns.whitespace)[1] || '';\n    \n    // Check for special cases like \"e.g. \", \"i.e. \", etc.\n    return (\n      getAbbreviations(text).misc.has(nextWord.toLowerCase()) ||\n      this.isNumberContinuation(text, position)\n    );\n  }\n\n  static isNumberContinuation(text, position) {\n    const nextPart = text.slice(position + 1, position + 10);\n    return /^\\s*\\d+/.test(nextPart);\n  }\n\n  static getPauseForPunctuation(char) {\n    return getPausePoints(text).get(char) || { weight: 0, pause: 0, context: null };\n  }\n\n  static analyzeEmphasis(text) {\n    const words = text.toLowerCase().split(CommonPatterns.whitespace);\n    const emphasisWords = words.filter(word => semanticMarkers.emphasis.has(word));\n    \n    const analysis = {\n      hasEmphasis: emphasisWords.length > 0,\n      emphasisCount: emphasisWords.length,\n      emphasisWords,\n      emphasisLevel: Math.min(emphasisWords.length / words.length, 1),\n      patterns: this.detectEmphasisPatterns(text)\n    };\n\n    // Adjust emphasis level based on formatting\n    if (analysis.patterns.some(pattern => pattern.type === 'strong')) {\n      analysis.emphasisLevel = Math.min(analysis.emphasisLevel + 0.3, 1);\n    }\n\n    return analysis;\n  }\n\n  static detectEmphasisPatterns(text) {\n    const patterns = [];\n    let match;\n\n    // Check for markdown-style emphasis\n    const emphasisRegex = CommonPatterns.emphasis;\n    while ((match = emphasisRegex.exec(text)) !== null) {\n      patterns.push({\n        type: match[1] || match[2] ? 'strong' : 'emphasis',\n        text: match[0],\n        position: match.index\n      });\n    }\n\n    return patterns;\n  }\n\n  static detectSpecialContent(text) {\n    return {\n      hasUrls: CommonPatterns.url.test(text),\n      hasEmails: CommonPatterns.email.test(text),\n      hasNumbers: CommonPatterns.number.test(text),\n      hasEmphasisMarkers: CommonPatterns.emphasis.test(text),\n      hasMath: CommonPatterns.math.test(text),\n      hasCode: CommonPatterns.code.test(text),\n      hasCitations: CommonPatterns.citation.test(text),\n      specialCharacters: this.extractSpecialCharacters(text)\n    };\n  }\n\n  static extractSpecialCharacters(text) {\n    const specialChars = text.match(/[^\\w\\s\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FFF]/g) || [];\n    return [...new Set(specialChars)];\n  }\n}\n\n// Helper function to get language-specific patterns\nfunction getPatterns(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return {\n    ...CommonPatterns,\n    ...langPatterns.patterns\n  };\n}\n\n// Helper function to get semantic markers\nfunction getSemanticMarkers(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return langPatterns.semanticMarkers;\n}\n\n// Helper function to get pause points\nfunction getPausePoints(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return langPatterns.pausePoints;\n}\n\n// Helper function to get abbreviations\nfunction getAbbreviations(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return langPatterns.abbreviations;\n}\n","// Chunk Management Utilities\nimport { TextProcessorConfig } from './textProcessorConfig.js';\nimport { CommonPatterns, getLanguagePatterns, detectLanguage } from './languagePatterns';\n\n// Helper function to get language-specific patterns\nfunction getPatterns(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return {\n    ...CommonPatterns,\n    ...langPatterns.patterns\n  };\n}\n\n// Helper function to get pause points\nfunction getPausePoints(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return langPatterns.pausePoints;\n}\n\nexport class ChunkManager {\n  static createOptimalChunks(sentence, blockType, context) {\n    const config = TextProcessorConfig.chunk;\n    const patterns = getPatterns(sentence);\n    const pausePoints = getPausePoints(sentence);\n    \n    // Initialize chunking parameters\n    const chunks = [];\n    let currentChunk = this.initializeChunk(blockType);\n    const words = this.splitIntoWords(sentence, patterns);\n\n    // Process words with advanced chunking strategy\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      const nextWord = words[i + 1] || '';\n      const potentialText = currentChunk.text ? `${currentChunk.text} ${word}` : word;\n\n      if (this.shouldSplitChunk(potentialText, word, nextWord, blockType, config, patterns, pausePoints)) {\n        chunks.push(this.finalizeChunk(currentChunk, context));\n        currentChunk = this.initializeChunk(blockType, word);\n      } else {\n        currentChunk.text = potentialText;\n        this.updateChunkMetadata(currentChunk, word, context, detectLanguage(sentence));\n      }\n    }\n\n    // Handle remaining text\n    if (currentChunk.text) {\n      chunks.push(this.finalizeChunk(currentChunk, context));\n    }\n\n    // Post-process chunks for optimal delivery\n    return this.postProcessChunks(chunks, context);\n  }\n\n  static initializeChunk(blockType, initialText = '') {\n    return {\n      text: initialText,\n      pause: 0,\n      emphasis: false,\n      type: blockType,\n      metadata: {\n        language: null,\n        complexity: 0,\n        emotion: null,\n        formality: 0\n      }\n    };\n  }\n\n  static splitIntoWords(text, patterns) {\n    return text.split(patterns.whitespace);\n  }\n\n  static shouldSplitChunk(potentialText, currentWord, nextWord, blockType, config, patterns, pausePoints) {\n    const length = potentialText.length;\n    const wordCount = potentialText.split(patterns.whitespace).length;\n\n    // Check basic length constraints\n    if (length >= config.max) return true;\n    if (length < config.min) return false;\n\n    // Check language-specific constraints\n    if (wordCount > config.maxWords) return true;\n    if (wordCount < config.minWords) return false;\n\n    // Check for natural break points\n    if (length >= config.optimal) {\n      // Check preferred break points\n      const lastChar = potentialText[potentialText.length - 1];\n      if (config.breakpoints.preferred.includes(lastChar)) return true;\n\n      // Check acceptable break points if approaching max length\n      if (length >= config.optimal * 1.2) {\n        if (config.breakpoints.acceptable.includes(lastChar)) return true;\n      }\n\n      // Prevent overflow with next word\n      if (length + nextWord.length + 1 > config.max) return true;\n    }\n\n    // Check semantic boundaries\n    if (this.isSemanticBoundary(currentWord, nextWord, patterns, pausePoints)) return true;\n\n    return false;\n  }\n\n  static isSemanticBoundary(currentWord, nextWord, patterns, pausePoints) {\n    // Check for transition words that indicate logical breaks\n    const transitionWords = new Set([\n      'however', 'therefore', 'furthermore', 'moreover',\n      'meanwhile', 'consequently', 'nevertheless', 'otherwise'\n    ]);\n\n    return (\n      transitionWords.has(nextWord.toLowerCase()) ||\n      this.isPunctuationBoundary(currentWord, pausePoints) ||\n      this.isStructuralBoundary(currentWord, nextWord, patterns)\n    );\n  }\n\n  static isPunctuationBoundary(word, pausePoints) {\n    const lastChar = word[word.length - 1];\n    return pausePoints.has(lastChar) && pausePoints.get(lastChar).weight >= 0.6;\n  }\n\n  static isStructuralBoundary(currentWord, nextWord, patterns) {\n    return (\n      /[:;]$/.test(currentWord) ||\n      /^[A-Z][a-z]/.test(nextWord) ||\n      /[\"\"\"]/.test(currentWord) ||\n      /^[•\\-*]/.test(nextWord)\n    );\n  }\n\n  static updateChunkMetadata(chunk, word, context, language) {\n    // Update language-specific metadata\n    chunk.metadata.language = language;\n\n    // Update pause based on punctuation\n    const lastChar = word[word.length - 1];\n    if (pausePoints.has(lastChar)) {\n      const pauseInfo = pausePoints.get(lastChar);\n      chunk.pause = Math.max(chunk.pause, pauseInfo.pause);\n      \n      // Adjust pause based on context\n      if (context.emphasisLevel > 0) {\n        chunk.pause *= 1.2;\n      }\n    }\n\n    // Update emphasis and emotion\n    const emphasis = TextAnalyzer.analyzeEmphasis(word);\n    if (emphasis.hasEmphasis) {\n      chunk.emphasis = true;\n      chunk.metadata.complexity += 0.1;\n    }\n\n    // Update complexity based on word characteristics\n    if (/^[A-Z][a-z]{12,}/.test(word)) {\n      chunk.metadata.complexity += 0.05; // Long capitalized words\n    }\n    if (/[-–—]/.test(word)) {\n      chunk.metadata.complexity += 0.03; // Hyphenated words\n    }\n\n    // Adjust formality based on word characteristics\n    if (/^[A-Z]{2,}$/.test(word)) {\n      chunk.metadata.formality += 0.1; // Acronyms\n    }\n  }\n\n  static finalizeChunk(chunk, context) {\n    const config = TextProcessorConfig;\n\n    // Ensure minimum pause\n    if (!chunk.pause) {\n      chunk.pause = config.pause.breathing;\n    }\n\n    // Apply context-based adjustments\n    if (context.contentType) {\n      const contentSettings = config.voice.contentTypes[context.contentType];\n      if (contentSettings) {\n        chunk.pause = Math.min(chunk.pause * contentSettings.rate, config.pause.emphasis);\n      }\n    }\n\n    // Apply emotional adjustments\n    if (context.emotion) {\n      const emotionPause = config.pause.emotion[context.emotion] || config.pause.emotion.neutral;\n      chunk.pause = Math.min(chunk.pause * 1.2, emotionPause);\n    }\n\n    // Format text based on metadata\n    chunk.text = this.formatChunkText(chunk);\n\n    return {\n      text: chunk.text.trim(),\n      pause: Math.round(chunk.pause),\n      type: chunk.type,\n      emphasis: chunk.emphasis,\n      metadata: chunk.metadata\n    };\n  }\n\n  static formatChunkText(chunk) {\n    let text = chunk.text;\n\n    // Add emphasis markers if needed\n    if (chunk.emphasis) {\n      text = `[EMPHASIS] ${text}`;\n    }\n\n    // Add emotional markers if present\n    if (chunk.metadata.emotion) {\n      text = `[${chunk.metadata.emotion.toUpperCase()}] ${text}`;\n    }\n\n    // Add complexity markers for very complex text\n    if (chunk.metadata.complexity > 0.8) {\n      text = `[COMPLEX] ${text}`;\n    }\n\n    return text;\n  }\n\n  static postProcessChunks(chunks, context) {\n    // Balance chunk sizes\n    chunks = this.balanceChunks(chunks);\n\n    // Optimize pauses between chunks\n    chunks = this.optimizePauses(chunks, context);\n\n    // Generate metadata for the chunk set\n    const metadata = this.generateMetadata(chunks);\n\n    return { chunks, metadata };\n  }\n\n  static balanceChunks(chunks) {\n    const config = TextProcessorConfig.chunk;\n    const balanced = [];\n    \n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n      \n      // Check if chunk is too short and can be merged\n      if (i < chunks.length - 1 && \n          chunk.text.length < config.min &&\n          (chunk.text.length + chunks[i + 1].text.length) <= config.optimal) {\n        // Merge with next chunk\n        chunks[i + 1].text = `${chunk.text} ${chunks[i + 1].text}`;\n        chunks[i + 1].pause = Math.max(chunk.pause, chunks[i + 1].pause);\n        chunks[i + 1].emphasis = chunk.emphasis || chunks[i + 1].emphasis;\n      } else {\n        balanced.push(chunk);\n      }\n    }\n\n    return balanced;\n  }\n\n  static optimizePauses(chunks, context) {\n    const config = TextProcessorConfig.pause;\n    let prevPause = 0;\n\n    return chunks.map((chunk, index) => {\n      // Avoid too long pauses between chunks\n      if (prevPause > 0 && chunk.pause > prevPause * 1.5) {\n        chunk.pause = Math.round(prevPause * 1.2);\n      }\n\n      // Add longer pauses before emphasis or new sections\n      if (chunk.emphasis || (index > 0 && chunk.type !== chunks[index - 1].type)) {\n        chunk.pause = Math.max(chunk.pause, config.emphasis);\n      }\n\n      prevPause = chunk.pause;\n      return chunk;\n    });\n  }\n\n  static generateMetadata(chunks) {\n    const metadata = {\n      totalChunks: chunks.length,\n      averageChunkLength: 0,\n      emphasisCount: 0,\n      pauseDistribution: {\n        short: 0,  // < 300ms\n        medium: 0, // 300-600ms\n        long: 0    // > 600ms\n      },\n      blockTypes: {},\n      complexity: {\n        average: 0,\n        max: 0\n      },\n      languages: new Set()\n    };\n\n    let totalLength = 0;\n    let totalComplexity = 0;\n\n    for (const chunk of chunks) {\n      // Basic metrics\n      totalLength += chunk.text.length;\n      if (chunk.emphasis) metadata.emphasisCount++;\n      \n      // Pause distribution\n      if (chunk.pause < 300) metadata.pauseDistribution.short++;\n      else if (chunk.pause < 600) metadata.pauseDistribution.medium++;\n      else metadata.pauseDistribution.long++;\n      \n      // Block types\n      metadata.blockTypes[chunk.type] = (metadata.blockTypes[chunk.type] || 0) + 1;\n\n      // Complexity\n      if (chunk.metadata.complexity) {\n        totalComplexity += chunk.metadata.complexity;\n        metadata.complexity.max = Math.max(metadata.complexity.max, chunk.metadata.complexity);\n      }\n\n      // Languages\n      if (chunk.metadata.language) {\n        metadata.languages.add(chunk.metadata.language);\n      }\n    }\n\n    // Calculate averages\n    metadata.averageChunkLength = Math.round(totalLength / chunks.length);\n    metadata.complexity.average = totalComplexity / chunks.length;\n\n    // Convert languages Set to Array for JSON serialization\n    metadata.languages = Array.from(metadata.languages);\n\n    metadata.processingComplete = true;\n    return metadata;\n  }\n}\n","// Advanced Text Processor Worker with NLP-like features\nimport { TextProcessorConfig } from './utils/textProcessorConfig.js';\nimport { CommonPatterns, getLanguagePatterns, detectLanguage } from './utils/languagePatterns.js';\nimport { TextAnalyzer } from './utils/textAnalyzer.js';\nimport { ChunkManager } from './utils/chunkManager.js';\n\nclass TextProcessor {\n  async processText(text) {\n    try {\n      // Initial text preparation\n      const preparedText = await this.prepareText(text);\n      \n      // Split into semantic blocks\n      const blocks = await this.splitIntoBlocks(preparedText);\n      \n      // Process blocks with context awareness\n      const processedBlocks = await this.processBlocksWithContext(blocks);\n      \n      // Generate final chunks with metadata\n      const finalChunks = [];\n      for (const block of processedBlocks) {\n        finalChunks.push(...block.chunks);\n      }\n\n      const metadata = ChunkManager.generateMetadata(finalChunks);\n      return { chunks: finalChunks, metadata };\n\n    } catch (error) {\n      console.error('Text processing error:', error);\n      throw error;\n    }\n  }\n\n  async prepareText(text) {\n    // Basic normalization\n    let normalized = text\n      .replace(getPatterns(text).whitespace, ' ')\n      .replace(/[\"\"]/g, '\"')\n      .replace(/[—–]/g, '-')\n      .replace(/\\.{3,}/g, '...')\n      .replace(/[\\u200B-\\u200D\\uFEFF]/g, '')\n      .trim();\n\n    // Handle special cases\n    normalized = await this.handleSpecialCases(normalized);\n\n    return normalized;\n  }\n\n  async handleSpecialCases(text) {\n    const specialContent = TextAnalyzer.detectSpecialContent(text);\n    \n    // Handle URLs\n    if (specialContent.hasUrls) {\n      text = text.replace(getPatterns(text).url, (match) => `[URL: ${match.split('/')[2]}]`);\n    }\n\n    // Handle email addresses\n    if (specialContent.hasEmails) {\n      text = text.replace(getPatterns(text).email, '[EMAIL ADDRESS]');\n    }\n\n    // Handle numbers\n    if (specialContent.hasNumbers) {\n      text = text.replace(getPatterns(text).number, (match) => match.replace(/,/g, ' comma '));\n    }\n\n    // Handle emphasis markers\n    if (specialContent.hasEmphasisMarkers) {\n      text = text.replace(getPatterns(text).emphasis, (match, g1, g2, g3, g4) => {\n        const content = g1 || g2 || g3 || g4;\n        return `[EMPHASIS: ${content}]`;\n      });\n    }\n\n    return text;\n  }\n\n  async splitIntoBlocks(text) {\n    const blocks = [];\n    let currentBlock = {\n      text: '',\n      type: 'paragraph',\n      context: {},\n      semanticLevel: 0\n    };\n\n    const lines = text.split('\\n');\n    \n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      \n      if (!trimmedLine) {\n        if (currentBlock.text) {\n          blocks.push(currentBlock);\n          currentBlock = {\n            text: '',\n            type: 'paragraph',\n            context: {},\n            semanticLevel: 0\n          };\n        }\n        continue;\n      }\n\n      // Detect block type and context\n      const blockInfo = TextAnalyzer.analyzeBlockType(trimmedLine);\n      \n      if (blockInfo.type !== currentBlock.type) {\n        if (currentBlock.text) {\n          blocks.push(currentBlock);\n        }\n        currentBlock = {\n          text: trimmedLine,\n          type: blockInfo.type,\n          context: blockInfo.context,\n          semanticLevel: blockInfo.semanticLevel\n        };\n      } else {\n        currentBlock.text += ' ' + trimmedLine;\n      }\n    }\n\n    if (currentBlock.text) {\n      blocks.push(currentBlock);\n    }\n\n    return blocks;\n  }\n\n  async processBlocksWithContext(blocks) {\n    const processedBlocks = [];\n    let context = {\n      previousType: null,\n      semanticChain: [],\n      emphasisLevel: 0\n    };\n\n    for (const block of blocks) {\n      const processed = await this.processBlockWithContext(block, context);\n      processedBlocks.push(processed);\n\n      // Update context\n      context.previousType = block.type;\n      context.semanticChain.push(block.type);\n      if (context.semanticChain.length > 3) context.semanticChain.shift();\n      context.emphasisLevel = block.context.emphasis ? \n        context.emphasisLevel + 1 : Math.max(0, context.emphasisLevel - 1);\n    }\n\n    return processedBlocks;\n  }\n\n  async processBlockWithContext(block, context) {\n    const sentences = await this.splitIntoSmartSentences(block.text);\n    const processedSentences = [];\n\n    for (const sentence of sentences) {\n      const chunks = ChunkManager.createOptimalChunks(sentence, block.type, context);\n      processedSentences.push(...chunks);\n    }\n\n    return {\n      ...block,\n      chunks: processedSentences\n    };\n  }\n\n  async splitIntoSmartSentences(text) {\n    const sentences = [];\n    let current = '';\n    let buffer = '';\n    let inQuote = false;\n    let inParentheses = 0;\n\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      buffer += char;\n\n      // Handle quotes and parentheses\n      if (getSemanticMarkers(text).quotes.has(char)) inQuote = !inQuote;\n      if (char === '(') inParentheses++;\n      if (char === ')') inParentheses = Math.max(0, inParentheses - 1);\n\n      if (char === '.' || char === '!' || char === '?') {\n        if (TextAnalyzer.isActualSentenceEnd(text, i, { inQuote, inParentheses })) {\n          current += buffer;\n          sentences.push(current.trim());\n          current = '';\n          buffer = '';\n        }\n      } else if (TextAnalyzer.getPauseForPunctuation(char).weight > 0) {\n        if (buffer.length > TextProcessorConfig.chunk.min && !inQuote && !inParentheses) {\n          current += buffer;\n          sentences.push(current.trim());\n          current = '';\n          buffer = '';\n        }\n      }\n    }\n\n    if (buffer.length > 0) {\n      current += buffer;\n    }\n    if (current.length > 0) {\n      sentences.push(current.trim());\n    }\n\n    return sentences;\n  }\n}\n\n// Helper function to get language-specific patterns\nfunction getPatterns(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return {\n    ...CommonPatterns,\n    ...langPatterns.patterns\n  };\n}\n\n// Helper function to get semantic markers\nfunction getSemanticMarkers(text) {\n  const lang = detectLanguage(text);\n  const langPatterns = getLanguagePatterns(lang);\n  return langPatterns.semanticMarkers;\n}\n\n// Initialize processor and handle messages\nconst processor = new TextProcessor();\n\nself.onmessage = async function(e) {\n  const { type, id, data } = e.data;\n  \n  if (type === 'processText') {\n    try {\n      const result = await processor.processText(data);\n      self.postMessage({\n        type: 'taskComplete',\n        taskId: id,\n        result\n      });\n    } catch (error) {\n      self.postMessage({\n        type: 'taskError',\n        taskId: id,\n        error: error.message\n      });\n    }\n  }\n};\n\n// Handle unexpected errors\nself.onerror = function(error) {\n  self.postMessage({\n    type: 'workerError',\n    error: error.message\n  });\n};\n"],"names":["TextProcessorConfig","chunk","optimal","max","min","tolerance","breakpoints","preferred","acceptable","fallback","languages","english","maxWords","minWords","japanese","maxChars","minChars","chinese","pause","breathing","emphasis","paragraph","list","punctuation","period","comma","semicolon","colon","dash","parenthesis","quote","ellipsis","context","dialogue","description","action","transition","emotion","excited","sad","thoughtful","neutral","processing","maxIterations","bufferSize","maxBlockSize","throttle","chunkDelay","batchSize","maxQueueSize","memory","maxCacheSize","cleanupThreshold","ttl","voice","rate","pitch","volume","contentTypes","heading","parenthetical","analysis","complexity","maxLength","maxClauses","maxNesting","classification","minConfidence","categories","semantic","emphasisThreshold","emotionThreshold","contextWindow","errorHandling","maxRetries","retryDelay","fallbackOptions","useSimpleChunking","skipComplexAnalysis","forceSynchronousProcessing","logging","level","maxEntries","persistLogs","accessibility","screenReader","announceStructure","describeFormatting","indicatePunctuation","alternatives","provideTextAlternatives","describeMathContent","handleSpecialCharacters","EnglishPatterns","abbreviations","titles","Set","academic","business","temporal","geographic","units","pausePoints","Map","weight","semanticMarkers","positive","negative","uncertainty","patterns","sentence","clause","quotation","url","email","number","time","date","phone","money","whitespace","structure","indentation","listItem","blockquote","codeBlock","horizontalRule","JapanesePatterns","honorifics","organizations","particle","honorific","kanji","hiragana","katakana","furigana","ruby","ChinesePatterns","measure","delimiter","simplified","traditional","pinyin","numbers","fullWidth","halfWidth","CommonPatterns","linebreak","indent","section","formatting","quotes","lists","LanguageDetection","detectLanguage","text","test","getLanguagePatterns","language","TextAnalyzer","_classCallCheck","_createClass","key","value","analyzeBlockType","blockInfo","type","semanticLevel","metadata","formality","getPatterns","getSemanticMarkers","isHeading","getHeadingLevel","quoted","analyzeComplexity","contentType","detectContentType","getFormalityLevel","emotionAnalysis","analyzeEmotion","emotionalIntensity","intensity","length","match","config","wordCount","split","Math","clauseCount","nestingLevel","technical","narrative","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","pattern","formalityLevels","result","_loop","_Object$entries2$_i","_Object$entries2","_i2","words","matches","toLowerCase","filter","word","has","exclamations","questions","isActualSentenceEnd","position","_ref","inQuote","inParentheses","prevWord","slice","pop","_i3","_Object$values","values","getAbbreviations","category","nextChar","followingChar","includes","toUpperCase","isSpecialCase","nextWord","misc","isNumberContinuation","nextPart","getPauseForPunctuation","char","getPausePoints","get","analyzeEmphasis","emphasisWords","hasEmphasis","emphasisCount","emphasisLevel","detectEmphasisPatterns","some","emphasisRegex","exec","push","index","detectSpecialContent","hasUrls","hasEmails","hasNumbers","hasEmphasisMarkers","hasMath","math","hasCode","code","hasCitations","citation","specialCharacters","extractSpecialCharacters","specialChars","_toConsumableArray","lang","langPatterns","_objectSpread","ChunkManager","createOptimalChunks","blockType","chunks","currentChunk","initializeChunk","splitIntoWords","i","potentialText","concat","shouldSplitChunk","finalizeChunk","updateChunkMetadata","postProcessChunks","initialText","arguments","undefined","currentWord","lastChar","isSemanticBoundary","transitionWords","isPunctuationBoundary","isStructuralBoundary","pauseInfo","contentSettings","emotionPause","formatChunkText","trim","round","balanceChunks","optimizePauses","generateMetadata","balanced","prevPause","map","totalChunks","averageChunkLength","pauseDistribution","medium","blockTypes","average","totalLength","totalComplexity","_iterator","_createForOfIteratorHelper","_step","s","n","done","add","err","e","f","Array","from","processingComplete","_regeneratorRuntime","t","r","prototype","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","prev","charAt","stop","rval","handle","complete","finish","_catch","delegateYield","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","isArray","_arrayLikeToArray","_n","F","toString","asyncGeneratorStep","_asyncToGenerator","apply","_next","_throw","_defineProperties","_toPropertyKey","_toPrimitive","toPrimitive","String","Number","TextProcessor","_processText","_callee","preparedText","blocks","processedBlocks","finalChunks","block","_callee$","_context","prepareText","splitIntoBlocks","processBlocksWithContext","t0","console","error","processText","_x","_prepareText","_callee2","normalized","_callee2$","_context2","replace","handleSpecialCases","_x2","_handleSpecialCases","_callee3","specialContent","_callee3$","_context3","g1","g2","g3","g4","content","_x3","_splitIntoBlocks","_callee4","currentBlock","lines","_iterator2","_step2","line","trimmedLine","_callee4$","_context4","_x4","_processBlocksWithContext","_callee5","_iterator3","_step3","processed","_callee5$","_context5","previousType","semanticChain","processBlockWithContext","shift","_x5","_processBlockWithContext","_callee6","sentences","processedSentences","_iterator4","_step4","_callee6$","_context6","splitIntoSmartSentences","_x6","_x7","_splitIntoSmartSentences","_callee7","current","buffer","_char","_callee7$","_context7","_x8","processor","self","onmessage","_callee8","_e$data","id","data","_callee8$","_context8","postMessage","taskId","message","_x9","onerror"],"sourceRoot":""}