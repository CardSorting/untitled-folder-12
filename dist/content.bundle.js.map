{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://untitled-folder-12/./content.js"],"sourcesContent":["console.log('Content script loaded');\n\n// Initialize text-to-speech\nlet speechSynthesis = window.speechSynthesis;\nlet currentUtterance = null;\nlet textProcessor = null;\n\n// Initialize the worker\nfunction initializeWorker() {\n  try {\n    const workerURL = chrome.runtime.getURL('dist/textProcessorWorker.bundle.js');\n    textProcessor = new Worker(workerURL);\n    \n    // Handle messages from the worker\n    textProcessor.onmessage = function(e) {\n      if (e.data.action === 'processedText') {\n        speakText(e.data.text);\n      }\n    };\n\n    textProcessor.onerror = function(error) {\n      console.error('Worker error:', error);\n    };\n\n    console.log('Worker initialized successfully');\n    return true;\n  } catch (error) {\n    console.error('Failed to initialize worker:', error);\n    return false;\n  }\n}\n\n// Initialize the worker when the content script loads\nlet workerInitialized = initializeWorker();\n\n// Listen for messages from the background script\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n  console.log('Received message:', request);\n  \n  // Handle ping message\n  if (request.action === 'ping') {\n    sendResponse({ success: true });\n    return true;\n  }\n  \n  if (request.action === 'readText' && request.text) {\n    try {\n      // Stop any current speech\n      if (currentUtterance) {\n        speechSynthesis.cancel();\n      }\n\n      // Ensure worker is initialized\n      if (!workerInitialized) {\n        console.log('Reinitializing worker...');\n        workerInitialized = initializeWorker();\n        if (!workerInitialized) {\n          throw new Error('Failed to initialize worker');\n        }\n      }\n\n      // Send text to worker for processing\n      textProcessor.postMessage({\n        action: 'processText',\n        text: request.text\n      });\n\n      // Send immediate success response\n      sendResponse({ success: true, message: 'Processing text' });\n    } catch (error) {\n      console.error('Error processing text:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  } else if (request.action !== 'ping') {\n    sendResponse({ success: false, error: 'Invalid request' });\n  }\n  \n  return true; // Keep the message channel open for async response\n});\n\n// Function to speak the text\nfunction speakText(text) {\n  try {\n    // Create and configure utterance\n    currentUtterance = new SpeechSynthesisUtterance(text);\n    \n    // Set default voice (English)\n    const voices = speechSynthesis.getVoices();\n    const englishVoice = voices.find(voice => voice.lang.startsWith('en-'));\n    if (englishVoice) {\n      currentUtterance.voice = englishVoice;\n    }\n\n    // Configure speech parameters\n    currentUtterance.rate = 1.0;\n    currentUtterance.pitch = 1.0;\n    currentUtterance.volume = 1.0;\n\n    // Add event listeners\n    currentUtterance.onend = () => {\n      console.log('Speech completed');\n      currentUtterance = null;\n    };\n\n    currentUtterance.onerror = (event) => {\n      console.error('Speech synthesis error:', event);\n      currentUtterance = null;\n    };\n\n    // Start speaking\n    speechSynthesis.speak(currentUtterance);\n    console.log('Started speaking');\n  } catch (error) {\n    console.error('Error in speech synthesis:', error);\n    currentUtterance = null;\n  }\n}\n\n// Initialize voices when they're loaded\nspeechSynthesis.onvoiceschanged = () => {\n  const voices = speechSynthesis.getVoices();\n  console.log('Available voices:', voices.length);\n};\n\n// Log that content script is ready\nconsole.log('Content script initialization complete');\n"],"names":["console","log","speechSynthesis","window","currentUtterance","textProcessor","initializeWorker","workerURL","chrome","runtime","getURL","Worker","onmessage","e","data","action","speakText","text","onerror","error","workerInitialized","onMessage","addListener","request","sender","sendResponse","success","cancel","Error","postMessage","message","SpeechSynthesisUtterance","voices","getVoices","englishVoice","find","voice","lang","startsWith","rate","pitch","volume","onend","event","speak","onvoiceschanged","length"],"sourceRoot":""}